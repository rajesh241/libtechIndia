"""This file has methods to create Bulk Users"""
from django.contrib.auth import get_user_model, authenticate
from user.serializers import autogenerate_email
User = get_user_model()
def are_user_names_available(userlist, username_field='username'):
    """Will check if all the names in userlist are available or not"""
    response = {}
    for uid in userlist:
        print(uid)
        user = get_user_model().objects.filter(**{username_field:uid})
        if len(user) > 0:
            response['status'] = 'fail'
            response['message'] = f'The {username_field} with {uid} already exists'
            return response
    return None
            
def create_bulk_usernames(count, prefix):
    """This method will create bulk users based on count and prefix"""
    username_list = []
    if not count.isdigit():
        return {'status':'fail', 'message' : 'count has to be an integer'}
    count = int(count)
    if (count < 1)  or (count > 100):
        return {'status':'fail', 'message' : 'count has to be between 1 and 100'}
        
    for cnt in range(1, int(count) + 1):
        username = f"{prefix}{cnt}"
        username_list.append(username)
    response = are_user_names_available(username_list,
                                        username_field="username")
    if response is not None: 
        return response
    response = create_users(username_list, username_field="username")
    return response
def create_bulk_useremails(emails):
    """This method will create bulk users based on list of email"""
    response = are_user_names_available(emails,
                                        username_field="email")
    if response is not None: 
        return response
    response = create_users(emails, username_field="email")
    return response
def create_users(userlist, username_field="username"):
    """Creates bulk users"""
    response={}
    created_users = []
    for uid in userlist:
        data = {}
        if username_field == 'username':
            email = autogenerate_email(None, uid)
            data['autogenerated_email'] = True
            data['is_active'] = True
            data['username'] = uid
        elif username_field == 'phone':
            email = autogenerate_email(uid, None)
            data['autogenerated_email'] = True
            data['phone'] = uid
            data['is_active'] = True
        else:
            email = uid
        data['email'] = email
        password = User.objects.make_random_password()
        data['password'] = password
        my_user = get_user_model().objects.create_user(**data)
        created_users.append(data)
        print(f"created {email}  {password}")
    response['users'] = created_users
    return response

        

